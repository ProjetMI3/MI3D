#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

#define NB_CARTES_MAX 150        // Nombre maximal de cartes dans une pile
#define NB_CARTES_JOUEUR 6      // Nombre de cartes par joueur
#define NB_JOUEURS_MAX 8        // Nombre maximum de joueurs autorisC)s


// Structure d'une carte
typedef struct {
	int valeur;     // Valeur de la carte (de -2 à +12)
	int visible;    // 0 = face cachée, 1 = visible
} Carte;

// Structure d'une pile de cartes (pioche ou défausse)
typedef struct {
	Carte cartes[NB_CARTES_MAX]; // Tableau de cartes
	int top;                  // Nombre de cartes actuellement dans la pile
} Pile;

// Structure d'un joueur
typedef struct {
	char nom[30];               // Nom du joueur
	Carte main[NB_CARTES_JOUEUR];  // Cartes personnelles du joueur
	Pile defausse;              // Pile de dC)fausse du joueur
} Joueur;

// Créer une carte avec une valeur et une visibilité donnée
Carte creer_carte(int valeur, int visible) {
	Carte c;
	c.valeur = valeur;
	c.visible = visible;
	return c;
}

// Mélanger les cartes dans une pile avec l'algorithme de Fisher-Yates
void melanger_pile(Pile* pile) {
	for (int i = 0; i < pile->sommet; i++) {
		int j = rand() % pile->sommet;
		Carte temp = pile->cartes[i];
		pile->cartes[i] = pile->cartes[j];
		pile->cartes[j] = temp;
	}
}

// Initialiser la pioche centrale avec toutes les cartes du jeu
void initialiser_pioche(Pile* pioche) {
    pioche->sommet = 0; // On commence avec une pile vide

    // Tableau pour les quantités spéciales de -2, -1 et 0
    int quantites[3] = {5, 10, 15};  // index 0 = -2, index 1 = -1, index 2 = 0

    // On parcourt toutes les valeurs possibles de cartes
    for (int valeur = -2; valeur <= 12; valeur++) {
        int nombre;

        // Si la valeur est -2, -1 ou 0, on la prend dans le tableau quantites
        if (valeur == -2)
            nombre = quantites[0];
        else if (valeur == -1)
            nombre = quantites[1];
        else if (valeur == 0)
            nombre = quantites[2];
        else
            nombre = 10; // Par défaut, il y a 10 cartes de chaque valeur positive

        // On ajoute 'nombre' cartes de cette valeur dans la pioche
        for (int i = 0; i < nombre; i++) {
            Carte nouvelle = creer_carte(valeur, 0); // 0 = face cachée
            pioche->cartes[pioche->top] = nouvelle;
            pioche->top++;
        }
    }

    melanger_pile(pioche); // Mélange final de la pioche
}

int main() {
	srand(time(NULL)); 

	int nb_joueurs;
	printf("Bienvenue sur CardYard (version française) !\n");
	printf("Combien de joueurs ? (2 à 8  %d) : ", NB_JOUEURS_MAX);
	scanf("%d", &nb_joueurs);

	if (nb_joueurs < 2 || nb_joueurs > NB_JOUEURS_MAX) {
		printf("Nombre invalide.\n");
		return 1;
	}

	Joueur joueurs[NB_JOUEURS_MAX];
	Pile pioche;
	initialiser_pioche(&pioche);

	// Initialisation des joueurs
	for (int i = 0; i < nb_joueurs; i++) {
		char nom[30];
		printf("Nom du joueur %d : ", i + 1);
		scanf("%s", nom);
		initialiser_joueur(&joueurs[i], nom, &pioche);
	}

	int partie_finie = 0;
	int joueur_fin = -1;
  return 0;
}
